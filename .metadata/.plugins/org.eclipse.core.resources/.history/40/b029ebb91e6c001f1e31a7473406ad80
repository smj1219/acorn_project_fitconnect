package com.example.fitconnect.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Delete;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.fitconnect.dto.MemberDto;
import com.example.fitconnect.dto.TrainerCalendarDto;
import com.example.fitconnect.service.TrainerCalendarService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.websocket.server.PathParam;
import lombok.Delegate;
@Tag(name = "Trainer Calendar API", description = "컨트롤러에 대한 설명입니다.")
@RestController
public class TrainerCalendarController {

	@Autowired private TrainerCalendarService service;
	
	@Operation(summary = "트레이너 캘린더 전체 일정", description = "파라미터로 받은 트레이너의 일정 정보와 멤버 리스트를 전달")
	@GetMapping("/trainercalendar/{trainer_num}")
	public Map<String, Object> calendarList(@PathVariable("trainer_num") int trainer_num) {
		
		List<TrainerCalendarDto> calList = service.selectCalenList(trainer_num);
		List<MemberDto> memList = service.selectMemberList(trainer_num);
		
		
		Map<String, Object> map=new HashMap<String, Object>();
		map.put("memList", memList);
		map.put("calList", calList);
	
		
		return map;
	}
	
	@Operation(summary = "일정 등록", description = "파라미터로 받은 트레이너의 일정 등록")
	@PostMapping("/trainercalendar/{trainer_num}")
	public Map<String, Object> insertCal(@PathVariable("trainer_num") int trainer_num,  TrainerCalendarDto dto){
		service.addSchedule(dto);
		Map<String, Object> map = new HashMap<String, Object>();
		return Map.of("isSuccess", true);
	}
	
	@PutMapping("/trainercalendar/{t_calendar_id}")
	public TrainerCalendarDto updateCal(@PathVariable("t_calendar_id") int t_calendar_id, TrainerCalendarDto dto){
		service.updateSchedule(dto);
		return dto;
		
	}
	
	@DeleteMapping("/trainercalendar/{t_calendar_id}")
	public Map<String, Object> deleteCal(@PathVariable("t_calendar_id") int t_calendar_id){
		service.deleteSchedule(t_calendar_id);
		Map<String, Object> map = new HashMap<String, Object>();
		return Map.of("isSuccess", true);
	}
	
	@GetMapping("/trainer/list/{trainer_num}")
	public Map<String, Object> memberList(@PathVariable("trainer_num") int trainer_num){
		List<MemberDto> list=service.selectMemberList(trainer_num);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("memberList", list);
		
		return map;
	}
	
	@GetMapping("trainer/detali/{member_num}")
	public Map<String, Object> memberOne(@PathVariable("member_num") int member_num, MemberDto dto){
		return service.seleteMemberOne(dto);
	}
	
	@DeleteMapping("trainer/detali/{member_num}")
	public Map<String, Object> disconnectMember(@PathVariable("member_num") int member_num){
		return Map.of("isSuccess", true);
	}
}
